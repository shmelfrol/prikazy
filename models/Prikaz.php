<?php


namespace app\models;

use app\components\EditinfoBehavior;
use Yii;
use yii\db\ActiveRecord;

class Prikaz extends ActiveRecord
{
    public $symbol;
    public $prikaz_id;
    public $status_name;
    public $color;


    public static function tableName()
    {
        return 'prikaz';
    }

    //
    public function behaviors()
    {
        return [
            EditinfoBehavior::className(),
        ];
    }

    public function rules()
    {
        return [
            [['id', 'numc', 'text', 'filename', 'index_id', 'cteated_at', 'created_by', 'reldate', 'symbol', 'prikaz_id'], 'safe'],
        ];
    }

    public function beforeSave($insert)
    {
        // сохраняем инфу об изменениях
        $this->editinfo();
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    public function getIndex()
    {
        return $this->hasOne(PrikazIndex::className(), ['id' => 'index_id']);
    }

    public function getStatus()
    {
        return $this->hasOne(ActionType::className(), ['id' => 'action_id']);
    }

    public function del()
    {

    }


    public function getNewNameForDeletedPrikaz()
    {
        $re = '/\.[A-Z,a-z]{3,4}/m';
        if (preg_match($re, $this->filename, $matches)) {
            $ext = strtolower($matches[0]);
            $ext = str_replace('.', '', $ext);
        }

        $timestamp = $this->reldate;
        $y = date('Y', $timestamp);
        $m = date('m', $timestamp);
        $d = date('d', $timestamp);
        $index = RuStringToEng($this->index->symbol);
        // $dir = '/prikazes/';
        $fullFilePath = '/' . $y . '/' . $y . $m . $d . '-' . 'N' . $this->numc . "-" . $index . "_deleted_" . time() . "." . $ext;
        return $fullFilePath;
    }

    public function delPrikaz()
    {
        $currentUser = Yii::$app->user;
        //получаем новое имя файла приказа при удалении приказа
        $delfilename = $this->getNewNameForDeletedPrikaz();

        $prikazFolder = dirname(__DIR__) . "/prikazes";
        //переименовываем файл приказа
        if (is_file($prikazFolder . $this->filename)) {
            rename($prikazFolder . $this->filename, $prikazFolder . $delfilename);

            if (!is_file(dirname(__DIR__) . "/prikazes" . $this->filename)) {
                $this->is_del = true;
                $this->filename = $delfilename;

                if ($this->save()) {
                    //после удаления приказа необходимо получить все приказы, которые данный приказ изменил
                    $modifiedPrikazesByThis = $this->getPrikazesModifiedByThis();
                    //после удаления приказа необходимо получить все записи,
                    // которые свидетельствют о том что данный приказ изменил другие приказы
                    // или его изменили другие приказы
                    //Нужно удалить все записи
                    $this->delAllModifiedString();
                    //необходимо пересчитать  статусы всех приказов которые изменил this
                    if (!empty($modifiedPrikazesByThis)) {
                        foreach ($modifiedPrikazesByThis as $mp) {
                            $mp->recalculateStatus();
                        }
                    }

                    addLog($currentUser, 'удаление', $delfilename);
                    return true;
                }
            }
        } else {
            print_r("no file");
        }

    }

    //получить все приказы, которые данный приказ изменил
    public function getPrikazesModifiedByThis($status_name = null)
    {
        $query = $modifiedByThisPrikaz = ModifiedPrikaz::find()
            ->select(['modified_prikazes.modified_prikaz_id']);
        if ($status_name !== null) {
            $action = \app\models\ActionType::findOne(['status_name' => $status_name]);
            $modifiedByThisPrikaz = $query->where(['prikaz_id' => $this->id, 'action_id' => $action->id])->all();
        } else {
            $modifiedByThisPrikaz = $query->where(['prikaz_id' => $this->id])->all();
        }

        $modified_ids = [];
        foreach ($modifiedByThisPrikaz as $p) {
            $modified_ids[] = $p->modified_prikaz_id;
        }
        return GetPrikazes($modified_ids);
    }

    public function getPrikazesModifiedThisPrikaz($status_name = null)
    {
        $action = \app\models\ActionType::findOne(['status_name' => $status_name]);
        $prikazesModifiedThisPrikaz = ModifiedPrikaz::find()
            ->select(['modified_prikazes.prikaz_id'])
            ->where(['modified_prikaz_id' => $this->id, 'action_id' => $action->id])
            ->all();
        $modified_ids = [];
        foreach ($prikazesModifiedThisPrikaz as $p) {
            $modified_ids[] = $p->prikaz_id;
        }
        return GetPrikazes($modified_ids);
    }

    public function delAllModifiedString()
    {
        $modifiedStringsByThisPrikaz = ModifiedPrikaz::find()
            ->where(['or',
                ['prikaz_id' => $this->id],
                ['modified_prikaz_id' => $this->id]])->all();
        //Нужно удалить все записи
        if(!empty($modifiedStringsByThisPrikaz)){
            foreach ($modifiedStringsByThisPrikaz as $string) {
                if (!$string->delete()) {
                    throw new Exception('не удаляется строка');
                }
            }
        }

    }


    public function recalculateStatus()
    {
        //ищем последний приказ который изменил $this
        $mod_p_by_an_p = ModifiedPrikaz::findOne(['modified_prikaz_id' => $this->id]);
        if (!empty($mod_p_by_an_p)) {
            $this->action_id = $mod_p_by_an_p->action_id;
            $this->modified_by_p_id = $mod_p_by_an_p->prikaz_id;
        } else {
            $this->action_id = 3;
            $this->modified_by_p_id = null;
        }
        $this->save();
    }


}